# -*- coding: utf-8 -*-
"""portofolio1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ghrDIqXKRh6yH0GcWiJvtUHqHroNX6JR

Melakukan data cleaning
"""

import pandas as pd #untuk memproses data
import numpy as np #untuk perhitungan aljabar
import matplotlib.pyplot as plt #untuk visualisasi data

data = pd.read_csv("Penyebab_Kematian.csv")

data #untuk memunculkan datanya

data.head()

#Menghutung jumlah kematian dari setiap penyebab
#('cause') digunakan untuk mengakses kolom cause
#['total deaths] digunakan untuk mennghitung keseluruhan jumlah kematian sehingga menggunakan tanda kurung siku kemudian dijumlahkan


grup_case = data.groupby('Cause')['Total Deaths'].sum()
print(grup_case)

nama_kolom = "Year"
data[nama_kolom]

#Mengurutkan data- munculnya tidak sama dengan yang di atas krn sebelum diurutkaan data yang yang muncul adalah data random

grup_case_urut = grup_case.sort_values(ascending = False)
print(grup_case_urut)

#Analisis tren kematian covid-19

covid19 = data.query("Cause == 'COVID-19' ")
plt.plot(covid19['Year'], covid19['Total Deaths'])
plt.xticks([2020,2021,2022])

#Analisis tren kematian Penyakit Terinfeksi dan Parasit Tertentu
penyakit= data.query("Cause == 'Penyakit Infeksi & Parasit Tertentu' ") #untuk melakukan pencarian dan penyaringan data berdasarkan kriteria tertentu dalam suatu dataframe
print(penyakit)
plt.plot(penyakit['Year'], penyakit['Total Deaths'])
plt.xticks([2005,2006,2007,2008])

#Analisis tren kematian Tsunami Aceh (Meninggal)

kecelakaan = data.query("Cause == 'Kecelakaan Lalu Lintas'")
plt.plot(kecelakaan['Year'], kecelakaan['Total Deaths'])
plt.xticks([2004,2005,2006])

cause = data.query("Year == 2022") #untuk menyaring data penyebab kematian di tahun 2022
print(cause)

cause = data.query("Year == 2021")
print(cause['Cause'])

from matplotlib import color_sequences
#Mengelompokkan tipe bencana berdasarkan jumlah kematian

grup_case = data.groupby('Type')['Total Deaths'].sum()
print(grup_case)
plt.pie(grup_case.values, labels = grup_case.index, colors = ['red', 'blue', 'yellow'], autopct = '%1.11f%%')

import matplotlib.pyplot as plt

# Filter data untuk "Bencana Non Alam & Penyakit"
kematian_nonAlam = data[data['Type'] == 'Bencana Non Alam dan Penyakit']

# Kelompokkan berdasarkan penyebab dan hitung total kematian
kematian_nonAlam_grup = kematian_nonAlam.groupby('Cause')['Total Deaths'].sum()

# Tampilkan total kematian untuk setiap penyebab
print(kematian_nonAlam_grup)

# Ambil 10 penyebab dengan total kematian tertinggi
top_10 = kematian_nonAlam_grup.sort_values(ascending=False).head(10)

# Plot dalam bentuk pie chart
plt.pie(top_10.values, labels=top_10.index, autopct='%1.1f%%')
plt.axis('equal')  # Membuat pie chart terlihat lebih bulat
plt.show()

#Mencari  becana alam dan penyakit yang memiliki paling anyak total kematian

alam = data.query("Type == 'Bencana Alam' ")

#dikelompokan berdasarkan total kematian
alam = alam.groupby('Cause')['Total Deaths'].sum()

top_10 = alam.sort_values(ascending= False). head(10)
print(top_10)

plt.pie(top_10.values , labels= top_10.index, autopct = '%1.11f%%', startangle =90)
plt.figure(figsize =(10,10))

#Analisis tren kematian akibat gempa bumi
gempa = data.query("Cause == 'Gempa Bumi' ")
gempa

plt.plot(gempa['Year'],gempa['Total Deaths'])
plt.title('Jumlah Korban Meninggal Akibat Gempa Bumi')
plt.xlabel('Year')
plt.ylabel('Total Deaths')